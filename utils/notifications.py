### utils/notifications.py ###
import logging
import requests
from typing import Optional, Dict, Any
import time

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram.
    """
    
    def __init__(self, token: str, chat_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.token = token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{token}/sendMessage"
    
    def send_message(self, text: str, parse_mode: str = "HTML") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if not self.token or not self.chat_id:
            logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞ Telegram, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(self.base_url, params=params, timeout=10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200 and response.json().get('ok'):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    def send_trade_notification(self, trade_info: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ
        
        Args:
            trade_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ
            
        Returns:
            bool: True, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–¥–µ–ª–∫–∏
        trade_type = trade_info.get('type', '').upper()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
        if trade_type == 'BUY':
            emoji = "üü¢"
            action = "–ü–û–ö–£–ü–ö–ê"
        elif trade_type == 'SELL':
            emoji = "üî¥"
            action = "–ü–†–û–î–ê–ñ–ê"
        elif trade_type == 'STOP_LOSS':
            emoji = "‚ö†Ô∏è"
            action = "–°–¢–û–ü-–õ–û–°–°"
        elif trade_type == 'TAKE_PROFIT':
            emoji = "‚úÖ"
            action = "–¢–ï–ô–ö-–ü–†–û–§–ò–¢"
        else:
            emoji = "‚ÑπÔ∏è"
            action = trade_type
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        symbol = trade_info.get('symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª')
        price = trade_info.get('price', 0)
        quantity = trade_info.get('quantity', 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–µ –¥–ª—è SELL
        pnl_info = ""
        if trade_type in ['SELL', 'STOP_LOSS', 'TAKE_PROFIT'] and 'pnl_percent' in trade_info:
            pnl = trade_info['pnl_percent']
            pnl_emoji = "üìà" if pnl > 0 else "üìâ"
            pnl_info = f"\n{pnl_emoji} P&L: <b>{pnl:.2f}%</b>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–µ
        reason_info = ""
        if 'reason' in trade_info and trade_info['reason']:
            reason_info = f"\nüìã –ü—Ä–∏—á–∏–Ω–∞: {trade_info['reason']}"
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"{emoji} <b>{action}: {symbol}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{price:.2f}</b>\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b>\n"
            f"üíµ –°—É–º–º–∞: <b>{price * quantity:.2f}</b>"
            f"{pnl_info}"
            f"{reason_info}"
        )
        
        return self.send_message(message)
    
    def send_signal_notification(self, symbol: str, signal_details: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ
        
        Args:
            symbol: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            signal_details: –î–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        signal_type = signal_details.get('type', '').upper()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if signal_type == 'BUY':
            emoji = "üîî"
            action = "–°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£"
        elif signal_type == 'SELL':
            emoji = "üîî"
            action = "–°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£"
        else:
            emoji = "‚ÑπÔ∏è"
            action = f"–°–ò–ì–ù–ê–õ {signal_type}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        strategy = signal_details.get('strategy', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è')
        price = signal_details.get('price', 0)
        strength = signal_details.get('strength', 0) * 100  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞
        reasons = signal_details.get('reasons', [])
        reasons_text = "\n".join([f"‚Ä¢ {reason}" for reason in reasons]) if reasons else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"{emoji} <b>{action}: {symbol}</b>\n"
            f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>{strategy}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{price:.2f}</b>\n"
            f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: <b>{strength:.0f}%</b>\n"
            f"üìã –ü—Ä–∏—á–∏–Ω—ã:\n{reasons_text}"
        )
        
        return self.send_message(message)
    
    def send_error_notification(self, error_message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            bool: True, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        message = f"‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n{error_message}"
        return self.send_message(message)
    
    def send_portfolio_report(self, portfolio_metrics: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        
        Args:
            portfolio_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if not portfolio_metrics:
            return self.send_message("üìä <b>–ü–û–†–¢–§–ï–õ–¨</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        open_positions = portfolio_metrics.get('open_positions', 0)
        closed_positions = portfolio_metrics.get('closed_positions', 0)
        total_pnl_percent = portfolio_metrics.get('total_pnl_percent', 0)
        total_pnl_absolute = portfolio_metrics.get('total_pnl_absolute', 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        pnl_emoji = "üìà" if total_pnl_percent > 0 else "üìâ"
        
        message = (
            f"üìä <b>–û–¢–ß–ï–¢ –û –ü–û–†–¢–§–ï–õ–ï</b>\n\n"
            f"üî¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: <b>{open_positions}</b>\n"
            f"üîÑ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: <b>{closed_positions}</b>\n"
            f"{pnl_emoji} –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{total_pnl_percent:.2f}%</b>\n"
            f"üí∞ –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{total_pnl_absolute:.2f}</b> —Ä—É–±.\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        if closed_positions > 0:
            win_rate = portfolio_metrics.get('win_rate', 0)
            average_win = portfolio_metrics.get('average_win', 0)
            average_loss = portfolio_metrics.get('average_loss', 0)
            profit_factor = portfolio_metrics.get('profit_factor', 0)
            
            message += (
                f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö: <b>{win_rate:.1f}%</b>\n"
                f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: <b>{average_win:.2f}%</b>\n"
                f"üìä –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: <b>{average_loss:.2f}%</b>\n"
                f"üìä Profit Factor: <b>{profit_factor:.2f}</b>\n"
            )
        
        return self.send_message(message)