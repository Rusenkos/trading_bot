### bot.py ###
import logging
import time
import sys
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import pandas as pd

# –ò–º–ø–æ—Ä—Ç –¥–ª—è Tinkoff API v0.2.0b111
from tinkoff.invest import Client, CandleInterval

from config.config import Config
from data.market_data import MarketDataProvider
from data.indicators import TechnicalIndicators
from data.patterns import CandlePatterns
from execution.executor import TradingExecutor
from execution.risk_manager import RiskManager
from execution.position_manager import PositionManager
from strategies.combined import CombinedStrategy
from strategies.trend import TrendStrategy
from strategies.reversal import ReversalStrategy
from utils.notifications import TelegramNotifier
from utils.state import StateManager

logger = logging.getLogger(__name__)

class TradingBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –∞–∫—Ü–∏—è–º–∏ MOEX —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ.
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    - –û–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∏ –æ—à–∏–±–æ–∫
    """
    
    def __init__(self, config_path=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = Config.load(config_path)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state_manager = StateManager("bot_state.json")
        self.state_manager.load_state()
        
        # –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞
        self.running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç API
        self.client = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        self.market_data = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.executor = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategies = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.config.TELEGRAM_TOKEN and self.config.TELEGRAM_CHAT_ID:
            self.notifier = TelegramNotifier(self.config.TELEGRAM_TOKEN, self.config.TELEGRAM_CHAT_ID)
        else:
            self.notifier = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._handle_exit)
        signal.signal(signal.SIGTERM, self._handle_exit)
    
    def _setup_logging(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        import os
        log_dir = os.path.dirname(self.config.LOG_FILE)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=getattr(logging, self.config.LOG_LEVEL),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S',
            handlers=[
                logging.FileHandler(self.config.LOG_FILE),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        logger.info("====== –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ ======")
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config}")
    
    def initialize(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
        
        Returns:
            bool: True, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
            self.client = Client(self.config.TINKOFF_TOKEN)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            self.market_data = MarketDataProvider(self.config.TINKOFF_TOKEN, self.config)
            if not self.market_data.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π
            self.position_manager = PositionManager(self.config)
            self.position_manager.load_state()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            self.risk_manager = RiskManager(self.config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            self.executor = TradingExecutor(self.client, self.config, self.risk_manager, self.position_manager)
            if not self.executor.update_account_info():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self._init_strategies()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            self._load_initial_data()
            
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            if self.notifier:
                self.notifier.send_message("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
            return False
    
    def _init_strategies(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
        active_strategies = self.config.ACTIVE_STRATEGIES
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if "trend" in active_strategies:
            self.strategies["trend"] = TrendStrategy(self.config)
            logger.info("–¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        if "reversal" in active_strategies:
            self.strategies["reversal"] = ReversalStrategy(self.config)
            logger.info("–ö–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –æ–±–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        if "trend" in active_strategies and "reversal" in active_strategies:
            self.strategies["combined"] = CombinedStrategy(self.config)
            logger.info("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategies)}")
    
    def _load_initial_data(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in self.config.SYMBOLS:
            try:
                df = self.market_data.get_historical_data(
                    symbol, 
                    self.config.TIMEFRAME, 
                    days_back=60  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 60 –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                )
                
                if df is not None and not df.empty:
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
    
    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        """
        if not self.initialize():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        self.running = True
        self.state_manager.set_running(True)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        last_data_update = datetime.now()
        last_stop_loss_check = datetime.now()
        last_status_report = datetime.now()
        
        try:
            while self.running:
                current_time = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ä—ã–Ω–æ–∫
                market_open = self.market_data.is_market_open()
                
                # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ
                if not market_open:
                    time.sleep(60)  # –ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ –º–∏–Ω—É—Ç—É
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤ (–∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥)
                if (current_time - last_stop_loss_check).total_seconds() >= self.config.CHECK_STOP_LOSS_INTERVAL:
                    self.executor.check_stop_loss_and_trailing()
                    last_stop_loss_check = current_time
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥)
                if (current_time - last_data_update).total_seconds() >= self.config.UPDATE_INTERVAL:
                    self._update_data_and_check_signals()
                    last_data_update = current_time
                
                # –û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ (–∫–∞–∂–¥—ã–π —á–∞—Å)
                if (current_time - last_status_report).total_seconds() >= 3600:
                    self._send_status_report()
                    last_status_report = current_time
                
                # –ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}", exc_info=True)
            if self.notifier:
                self.notifier.send_error_notification(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self._shutdown()
    
    def _update_data_and_check_signals(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        self.executor.update_account_info()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        for symbol in self.config.SYMBOLS:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                df = self.market_data.update_data(symbol, self.config.TIMEFRAME)
                
                if df is None or df.empty:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                df = TechnicalIndicators.calculate_all_indicators(df, self.config)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
                df = CandlePatterns.identify_patterns(df)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                self._check_buy_signals(symbol, df)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
                if self.position_manager.has_position(symbol):
                    position = self.position_manager.get_position(symbol)
                    self._check_sell_signals(symbol, df, position)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}", exc_info=True)
    
    def _check_buy_signals(self, symbol: str, data: pd.DataFrame):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Args:
            symbol: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            data: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
        if self.position_manager.has_position(symbol):
            return
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        buy_signals = []
        
        for strategy_name, strategy in self.strategies.items():
            signal, details = strategy.check_buy_signals(data)
            
            if signal:
                buy_signals.append(details)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol} –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {details}")
        
        if buy_signals:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–∏–ª—å–Ω–µ–π—à–∏–π
            if len(buy_signals) > 1:
                buy_signals.sort(key=lambda x: x.get('strength', 0), reverse=True)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
            best_signal = buy_signals[0]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
            if self.notifier:
                self.notifier.send_signal_notification(symbol, best_signal)
            
            # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
            self.executor.execute_trade_signal(symbol, best_signal)
    
    def _check_sell_signals(self, symbol: str, data: pd.DataFrame, position: Dict[str, Any]):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Args:
            symbol: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            data: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            position: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        """
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        sell_signals = []
        
        for strategy_name, strategy in self.strategies.items():
            signal, details = strategy.check_sell_signals(data, position)
            
            if signal:
                sell_signals.append(details)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol} –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {details}")
        
        if sell_signals:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–∏–ª—å–Ω–µ–π—à–∏–π
            if len(sell_signals) > 1:
                sell_signals.sort(key=lambda x: x.get('strength', 0), reverse=True)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
            best_signal = sell_signals[0]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
            if self.notifier:
                self.notifier.send_signal_notification(symbol, best_signal)
            
            # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
            self.executor.execute_trade_signal(symbol, best_signal)
    
    def _send_status_report(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_metrics = self.position_manager.calculate_portfolio_metrics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω. –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {portfolio_metrics['open_positions']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ Telegram
        if self.notifier:
            self.notifier.send_portfolio_report(portfolio_metrics)
    
    def _handle_exit(self, signum, frame):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        self.running = False
    
    def _shutdown(self):
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        """
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        self.position_manager.save_state()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state_manager.set_running(False)
        self.state_manager.save_state({
            'last_shutdown': datetime.now().isoformat(),
            'portfolio': self.executor.portfolio if self.executor else {},
            'balance': self.executor.balance if self.executor else 0
        })
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.market_data:
            self.market_data.disconnect()
        
        if self.client:
            self.client.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if self.notifier:
            self.notifier.send_message("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏–∑–≤–Ω–µ
        """
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
        self.running = False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = TradingBot()
    bot.run()